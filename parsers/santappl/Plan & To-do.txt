# To-do (& shorthand documentation)
… die Methode: Recording what has to be done, script by script


## In development now
	 //////////////////
	 — Clearing up errors and warnings (to an extent)




## Overview
	 ////////

### Blocks and expressions (further named "expr")
… contain objects of:
	— declarations of compatible wrapper exprs and contained exprs (optional):
	… fnObj['compatible'] ; fnObj[nestedExpr].compatible

	— sets of symbols, meaningfully structured
	… fnObj[nestedExpr].symbols

… To-do:
— consider shaping expressions as React-ready:
	function | class | json object
	… wrapped in ExpressionOrBlock React class (reconciler included)

— create a good example use-case blocks/expressions and logic (as in "…/text2json/expression/layouts.jsx)

… See block & expression in one component in "…/text2json/expressions/orderedList.js"


### Functions
— Packing tokens from a flat into a tree structure (by a JSON schema or otherwise)
— Symbols used by an expression or block are declared in the component or its subparts » requires a function currently called "extendSymbols" (in './expressions/orderedList')
— Buffer for expression/block matching runtime script is adjusted from within expressions/blocks, too (for example, if the longest expression is "12456. ", an item in a numbered ordered list, then the buffer length should be at least 8 characters for this expression to be recognized)


### Schemas (json-schema compatible)
… To-do:
— work on (optionally replaceable) ./schema.signature.json , ./schema.validation.js
— work on ./parsers/gestures-tree/: ./schema.json , ./schema.gesture.json


### Parser XML logic
… currently contains:

… To-do:
— 




## Individual scripts
	 //////////////////

### ./index
— dbFlush() function will during development time contain an example data structure


### ./parser.runtime.js
… with a few solid examples (possibly from Germany)
— addToTrie function: a list of expressions or sequences is added to a trie (taking into account distinction between "words" and "expressions/blocks" as two seperate categories)


### ./parser.processFlow
… To-do:
— currently there's an array of condensed steps (which serves no purpose in current code disposition)… what to do about it?
— refactor parseText() to assembleParserTrie()


### ./db.js
— A sample default dataset of 'tokens' is placed there (with relations)
— Basic DB functions (such as a list of recent entries)


### ./parser.ReactWrapper




## Milestones later in development timeline
	 ////////////////////////////////////////

### ./expressions/datetime.js
— How to get ISO standard dates into this scheme? With "regex-trie" npm package and an implementation of the standard with Regex?